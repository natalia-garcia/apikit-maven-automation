#%RAML 0.8
title: Interop Testing
version: v1.0
baseUri: http://localhost:8081/api
documentation:
  - title: Interop documentation
    content: Some content
mediaType: application/json
resourceTypes:
  - collection:
      usage: This resourceType should be used for any collection of items
      description: The collection of <<resourcePathName>>
      get:
        description: Get all <<resourcePathName>>, optionally filtered
      post:
        description: Create a new <<resourcePathName | !singularize>>
  - element: 
      usage: This resourceType should be use for any single element
      description: A specific <<resourcePathName | !singularize>>
      put?:
        description: Update a <<resourcePathName | !singularize>>
      delete?:
        description: Delete a <<resourcePathName | !singularize>>
schemas:
  - Items: |
      { "$schema" : "http://json-schema.org/draft-03/schema",
          "id" : "http://jsonschema.net",
          "properties" : { "items" : { "id" : "http://jsonschema.net/items",
                  "items" : { "id" : "http://jsonschema.net/items/0",
                     "properties" : { "code" : { "id" : "http://jsonschema.net/items/0/code",
                        "required" : false,
                        "type" : "string"
                        },
                    "color" : { "id" : "http://jsonschema.net/items/0/color",
                        "required" : false,
                        "type" : "string"
                      },
                    "description" : { "id" : "http://jsonschema.net/items/0/description",
                        "required" : false,
                        "type" : "string"
                      },
                    "id" : { "id" : "http://jsonschema.net/items/0/id",
                        "required" : false,
                        "type" : "number"
                      },
                    "size" : { "id" : "http://jsonschema.net/items/0/size",
                        "required" : false,
                        "type" : "string"
                      }
                  },
                "required" : false,
                "type" : "object"
              },
            "required" : false,
            "type" : "array"
          } },
        "required" : false,
        "type" : "object"
      }
traits:
  - post-item:
      queryParameters:
        code:
          displayName: Code
          description: |
              Code that identifies the item.
          type: string
          minLength: 3
          maxLength: 10
          required: true
          example: "ATB-123"
        size:
          displayName: Size
          description: |
              Size of the item. Note that it must be lower case. 
          type: string
          required: true
          enum: [small, medium, large]
          example: "small"
          default: "medium"
        color: 
          displayName: Color
          description: Color of the item. 
          type: string
          required: false
          example: "blue"
        description: 
          displayName: Description
          description: Detailed description of the item. 
          type: string
          required: false
          example: | 
            "Baptism souvenirs. There are a variety of colors and the combination of them
            can be personalized."
  - errorCodes: 
      responses:
        400: 
          description: Bad Request. 
        404: 
          description: Resource not found
        405: 
          description: Method not allowed
        406: 
          description: Not acceptable
        409: 
          description: Conflict
        415: 
          description: Unsupported media type  
securitySchemes:
    - oauth_2_0:
        description: |
            Mule OAUTH.
        type: OAuth 2.0
        describedBy:
            headers:
                Authorization:
                    description: |
                      Used to send a valid OAuth 2 access token. Do not use 
                      with the "access_token" query string parameter.
                    type: string
            queryParameters:
                access_token:
                    description: |
                      Used to send a valid OAuth 2 access token. Do not use together with 
                      the "Authorization" header
                    type: string
            responses:
                401:
                    description: |
                        Bad or expired token. This can happen if the user or Dropbox
                        revoked or expired an access token. To fix, you should re-
                        authenticate the user.
                403:
                    description: |
                        Bad OAuth request (wrong consumer key, bad nonce, expired
                        timestamp...). Unfortunately, re-authenticating the user wont help here.
        settings:
          authorizationUri: http://localhost:9999/authorize
          accessTokenUri: http://localhost:9999/access-token
          authorizationGrants: [ code, token ]
/items: 
  displayName: Items
  type: collection
  get:
    description: Get a list of all the available items. 
    is: [errorCodes]
    securedBy: [oauth_2_0]
    queryParameters:
      size:
        displayName: Size
        description: |
          Size of the item. 
        enum: [ small, medium, large ]
        required: false    
    responses: 
      200: 
        description: Retrieved all available items. 
        body: 
          application/json: 
            schema: Items
            example: |
              {
                "items": 
                  [
                    {
                      "id":123, 
                      "code":"AD-12",
                      "color":"blue",
                      "size":"medium",
                      "description":"Borders in light blue"
                    }, 
                    {
                      "id":321, 
                      "code":"AD-13",
                      "color":"pink",
                      "size":"small",
                      "description":"Borders in red"
                    }
                  ]
                }
  post:
    description: Create a new item
    is: [post-item, errorCodes]
    body:
      application/json:
        schema: Items
    responses: 
      204:  
        description: Created new item
  /{itemId}:
    displayName: Item
    type: element
    uriParameters: 
      itemId: 
        description: |
          Id that identifies the item.
        type: integer
        minimum: 0
        example: 138
    get:
      description: Get an item by Code. 
      is: [errorCodes]
      responses: 
        200: 
          description: Retrieved item
          body: 
            application/json: 
              example: |
                  {
                      "id":123, 
                      "code":"AD-12",
                      "color":"blue",
                      "size":"medium",
                      "description":"Borders in light blue"
                  }                
              schema: Items          
    put:
      description: Update an item by Code. 
      is: [errorCodes]
      body:
        application/json:
          schema: Items
      responses: 
        201: 
          description: Item successfully updated.
          body: 
            application/json: 
              schema: Items 
    delete:
      description: Delete an item by Code. 
      is: [errorCodes]
      body: 
        multipart/form-data:
          formParameters:
            code: 
              displayName: Code
              description: Code of the item to delete. 
              example: "ASX-140"
              type: string
              required: true
              minLength: 3
              maxLength: 12
      responses: 
        204: 
          description: Item successfully deleted. 
        404: 
          description: Resource not found
          headers:
            X-waiting-period:
              description: |
                The number of seconds to wait before you can attempt to make a request again.
              type: integer
              required: true
              minimum: 1
              maximum: 3600
              example: 34